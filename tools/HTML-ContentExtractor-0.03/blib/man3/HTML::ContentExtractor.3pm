.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::ContentExtractor 3"
.TH HTML::ContentExtractor 3 "2007-06-23" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::ContentExtractor \- extract the main content from a web page by analysising the DOM tree!
.SH "VERSION"
.IX Header "VERSION"
Version 0.03
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use HTML::ContentExtractor;
\&    my $extractor = HTML::ContentExtractor\->new();
\&    my $agent=LWP::UserAgent\->new;
\&
\&    my $url=\*(Aqhttp://sports.sina.com.cn/g/2007\-03\-23/16572821174.shtml\*(Aq;
\&    my $res=$agent\->get($url);
\&    my $HTML = $res\->decoded_content();
\&
\&    $extractor\->extract($url,$HTML);
\&    print $extractor\->as_html();
\&    print $extractor\->as_text();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Web pages often contain clutter (such as ads, unnecessary images and
extraneous links) around the body of an article that distracts a user
from actual content. This module is used to reduce the noise content
in web pages and thus identify the content rich regions.
.PP
A web page is first parsed by an \s-1HTML\s0 parser, which corrects the
markup and creates a \s-1DOM\s0 (Document Object Model) tree. By using a
depth-first traversal to navigate the \s-1DOM\s0 tree, noise nodes are
identified and removed, thus the main content is extracted. Some
useless nodes (script, style, etc.) are removed; the container nodes
(table, div, etc.) which have high link/text ratio (higher than
threshold) are removed; (link/text ratio is the ratio of the number of
links and non-linked words.) The nodes contain any string in the
predefined spam string list are removed.
.PP
Please notice the input \s-1HTML\s0 should be encoded in utf\-8 format( so do
the spam words), thus the module can handle web pages in any language
(I've used it to process English, Chinese, and Japanese web pages).
.ie n .IP "$e = HTML::ContentExtractor\->new(%options);" 4
.el .IP "\f(CW$e\fR = HTML::ContentExtractor\->new(%options);" 4
.IX Item "$e = HTML::ContentExtractor->new(%options);"
Constructs a new \f(CW\*(C`HTML::ContentExtractor\*(C'\fR object. The optional
\&\f(CW%options\fR hash can be used to set the options list below.
.ie n .IP "$e\->\fItable_tags()\fR;" 4
.el .IP "\f(CW$e\fR\->\fItable_tags()\fR;" 4
.IX Item "$e->table_tags();"
.PD 0
.ie n .IP "$e\->table_tags(@tags);" 4
.el .IP "\f(CW$e\fR\->table_tags(@tags);" 4
.IX Item "$e->table_tags(@tags);"
.ie n .IP "$e\->table_tags(\e@tags);" 4
.el .IP "\f(CW$e\fR\->table_tags(\e@tags);" 4
.IX Item "$e->table_tags(@tags);"
.PD
This is used to get/set the table tags array. The tags are used as the
container tags.
.ie n .IP "$e\->\fIignore_tags()\fR;" 4
.el .IP "\f(CW$e\fR\->\fIignore_tags()\fR;" 4
.IX Item "$e->ignore_tags();"
.PD 0
.ie n .IP "$e\->ignore_tags(@tags);" 4
.el .IP "\f(CW$e\fR\->ignore_tags(@tags);" 4
.IX Item "$e->ignore_tags(@tags);"
.ie n .IP "$e\->ignore_tags(\e@tags);" 4
.el .IP "\f(CW$e\fR\->ignore_tags(\e@tags);" 4
.IX Item "$e->ignore_tags(@tags);"
.PD
This is used to get/set the ignore tags array. The elements of such
tags will be removed.
.ie n .IP "$e\->\fIspam_words()\fR;" 4
.el .IP "\f(CW$e\fR\->\fIspam_words()\fR;" 4
.IX Item "$e->spam_words();"
.PD 0
.ie n .IP "$e\->spam_words(@strings);" 4
.el .IP "\f(CW$e\fR\->spam_words(@strings);" 4
.IX Item "$e->spam_words(@strings);"
.ie n .IP "$e\->spam_words(\e@strings);" 4
.el .IP "\f(CW$e\fR\->spam_words(\e@strings);" 4
.IX Item "$e->spam_words(@strings);"
.PD
This is used to get/set the spam words list. The elements have such
string will be removed.
.ie n .IP "$e\->\fIlink_text_ratio()\fR;" 4
.el .IP "\f(CW$e\fR\->\fIlink_text_ratio()\fR;" 4
.IX Item "$e->link_text_ratio();"
.PD 0
.ie n .IP "$e\->link_text_ratio($ratio);" 4
.el .IP "\f(CW$e\fR\->link_text_ratio($ratio);" 4
.IX Item "$e->link_text_ratio($ratio);"
.PD
This is used to get/set the link/text ratio, default is 0.05.
.ie n .IP "$e\->\fImin_text_len()\fR;" 4
.el .IP "\f(CW$e\fR\->\fImin_text_len()\fR;" 4
.IX Item "$e->min_text_len();"
.PD 0
.ie n .IP "$e\->min_text_len($len);" 4
.el .IP "\f(CW$e\fR\->min_text_len($len);" 4
.IX Item "$e->min_text_len($len);"
.PD
This is used to get/set the min text length, default is 20. If length
of the text of an elment is less than this value, this element will be
removed.
.ie n .IP "$e\->extract($url,$HTML);" 4
.el .IP "\f(CW$e\fR\->extract($url,$HTML);" 4
.IX Item "$e->extract($url,$HTML);"
This is used to perform the extraction process. Please notice the
input \f(CW$HTML\fR must be encoded in \s-1UTF\-8\s0.
.ie n .IP "$e\->\fIas_html()\fR;" 4
.el .IP "\f(CW$e\fR\->\fIas_html()\fR;" 4
.IX Item "$e->as_html();"
Return the extraction result in \s-1HTML\s0 format.
.ie n .IP "$e\->\fIas_text()\fR;" 4
.el .IP "\f(CW$e\fR\->\fIas_text()\fR;" 4
.IX Item "$e->as_text();"
Return the extraction result in text format.
.SH "AUTHOR"
.IX Header "AUTHOR"
Zhang Jun, \f(CW\*(C`<jzhang533 at gmail.com>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2007 Zhang Jun, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
